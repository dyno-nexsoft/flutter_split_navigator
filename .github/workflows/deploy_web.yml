# The name of the workflow.
name: Deploy Flutter Web App

# Define when the workflow should run.
on:
  # Trigger the workflow on pushes to the 'master' branch.
  push:
    branches:
      - master
    paths:
      - "**.dart"
      - "example/**"
      - ".github/workflows/deploy_web.yml"

# Define the jobs that will run as part of this workflow.
jobs:
  build_and_deploy:
    # Set the runner environment.
    runs-on: ubuntu-latest

    # Add permissions for the GITHUB_TOKEN to allow it to deploy to GitHub Pages.
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: 📦 Checkout repository
        # Use the official action to check out your code.
        uses: actions/checkout@v4

      - name: ⚙️ Set up Flutter
        # Use a dedicated action to set up the Flutter environment.
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: 📥 Get Flutter packages
        # Fetch all dependencies for your project.
        run: flutter pub get
        working-directory: example

      - name: 🏗️ Build web app
        # Build the Flutter app for the web.
        run: flutter build web --base-href="/${{ github.event.repository.name }}/" --target="lib/main_with_go_router.dart"
        working-directory: example

      - name: 🚀 Deploy to GitHub Pages
        # Use a dedicated action to deploy the build output to the 'gh-pages' branch.
        uses: peaceiris/actions-gh-pages@v4
        with:
          # Use the built-in GITHUB_TOKEN instead of a Personal Access Token (PAT).
          # The `permissions` section above handles the necessary access.
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: example/build/web
